JSX siemplemente ofrede una forma más sencilla y simple de escribir la funcion React.createElement
React.createElement('TAG','ATRIBUTOS','CONTENIDO')
const jsx = <h1>Hola {ACA VAN EXPRESIONES}</h1>
Al final JSX se compila a traves de React.createElement
JSX --> Azucar sintética 

//Componentes//

Componentes serian como Átomos, nuestra unidad basica---> Bloques de construcción
'Componente' vs 'Elemento'  ---> El elemento sale del componente

Identificación de Componentes
Dos pregunstas guías:
*Que elementos se repiten
    -Elementos en una lista
    -Elementos que comparten un aspecto visual o de funcionalidad
*Que elementos cumplen una funcion muy específica (Ej. Buscador)
    -Sirven para encapsular lógica
    -Permiten juntar muchos comportamientos y aspectos visuales en un solo lugar

'Identificar componentes es una habilidad esencial para poder desarrollar aplicaciones de React'

//Nuestro Primer Componente//

//Props//
Pasamos argumentos a nuestra funcion, y estos argumentos se llaman {Props} y lo podemos leer a traves de {this.props}
Atributos a nuestro componentes


//Nuestra Primera Página//
Una página es un componentes que tiene a su ves otros componentes

//Class 21 Ciclo de Vida de un Componente
Cuando React lo renderiza --> 'Entre en enscena
Cuando su stado cambia o recibe props diferente --> 'Se actualiza'
Cuando cambiamos de pag y ese componente ya no esta--> 'Se desmonto'

Montaje --> Representa el momento donde se inserta el codigo
            del Componente en el DOM
    Cuando se monta React llama a 3 metodos:
        -constructor
        -render
        -ComponentDidMount
Actualizacion --> Cuando los props o el estado del componente cambia 
            ocurre la Actualizacion
        Se llaman 2 metodos:
        -render
        -componentDidUpdate    
Desmontaje --> Cuando el componente sale de la escena, desaparece de la pantalla
        Se llama a 1 metodo:
        -componentWillUnmount

//Llamada a una API
    Consta de 3 estados:
        -Loading--> La peticion se envia y se esta esperando
        -Cuando regresa la peticion puede regresar de 2 formas:
            -Error: 
            -Dato:
                -Datos Vacios-->Mensaje de Datos vacios
                -Varios Datos

/*
    Siempre que hagamos llamado a una API tendremos dos principales funciones:
    Axios y Fetch. Por lo general es mas conveniente y mas sencillo usar Fetch.
    Pero hay muchos que se inclinan por Axios ya q hace peticiones basadas en Promesas de ES6.
    Y ademas tienen las siguientes funcionalidades: hace peticiones y respuestas, transforma la data de la peticion y la respuesta, 
    permite cancelas las peticiones, entre otras
*/






























